version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0
  owasp: entur/owasp@0.0.10

executors:
  ubuntu:
    working_directory: ~/mattermost/
    resource_class: 2xlarge
    machine:
      image: "ubuntu-2004:202201-02"
    environment:
      COMPOSE_PROJECT_NAME: "circleci"

jobs:
  setup-mattermost-server:
    working_directory: ~/mattermost/mattermost-server
    docker:
      - image: cimg/base:2022.08@sha256:35e5e29930ab565475a4f2aa9b4124998ed67dbc7b0e2dd5f420a4189d08d0d2
    resource_class: xlarge
    # Use `--retry-all-errors` instead of `until` after curl version >= 7.71.0; `retry` will not work, since it only retries on transient errors, 403 is not one of them.
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - mattermost-server
  setup-mattermost-webapp:
    working_directory: ~/mattermost/mattermost-webapp
    docker:
      - image: mattermost/mattermost-build-webapp:20220802_node-16.10.0@sha256:3272aa759f10c2ef1719ed08cc82ddb07224bec5be86f09800c72f5e2a623c3d
    resource_class: xlarge
    steps:
      - run: |
          cd ../
          git clone --depth=1 --no-single-branch https://github.com/mattermost/mattermost-webapp.git
          cd mattermost-webapp
          git checkout $CIRCLE_BRANCH || git checkout master
          export WEBAPP_GIT_COMMIT=$(git rev-parse HEAD)
          echo "$WEBAPP_GIT_COMMIT"
          FILE_DIST=dist.tar.gz
          curl --version
          runtime="2 minute"
          endtime=$(date -ud "$runtime" +%s)
          while [[ $(date -u +%s) -le $endtime ]]; do
              if curl --max-time 30 -f -o $FILE_DIST https://pr-builds.mattermost.com/mattermost-webapp/commit/$WEBAPP_GIT_COMMIT/mattermost-webapp.tar.gz; then
                break
              fi
              echo "Waiting for webapp git commit $WEBAPP_GIT_COMMIT with sleep 5: `date +%H:%M:%S`"
              sleep 5
          done
          ls -al
          if tar -tzf $FILE_DIST >/dev/null; then
            mkdir dist && tar -xvf $FILE_DIST -C dist --strip-components=1
          else
            npm ci && make build
          fi
          cd -
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - mattermost-webapp
  setup-focalboard:
    working_directory: ~/mattermost/focalboard
    docker:
      - image: cimg/base:2022.08@sha256:35e5e29930ab565475a4f2aa9b4124998ed67dbc7b0e2dd5f420a4189d08d0d2
    resource_class: xlarge
    steps:
      - run: |
          cd ../
          git clone --depth=10 --no-single-branch https://github.com/mattermost/focalboard.git
          cd focalboard
          git checkout $CIRCLE_BRANCH || git checkout main
          echo $(git rev-parse HEAD)
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - focalboard

  check-deps:
    parameters:
      cve_data_directory:
        type: string
        default: "~/.owasp/dependency-check-data"
    working_directory: ~/mattermost/mattermost-server
    executor: owasp/default
    environment:
      version_url: "https://jeremylong.github.io/DependencyCheck/current.txt"
      executable_url: "https://dl.bintray.com/jeremy-long/owasp/dependency-check-VERSION-release.zip"
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          name: Checkout config
          command: cd .. && git clone --depth=1 https://github.com/mattermost/security-automation-config
      - run:
          name: Install Go
          command: sudo apt-get update && sudo apt-get install golang
      - owasp/with_commandline:
          steps:
            # Taken from https://github.com/entur/owasp-orb/blob/master/src/%40orb.yml#L349-L361
            - owasp/generate_cache_keys:
                cache_key: commandline-default-cache-key-v7
            - owasp/restore_owasp_cache
            - run:
                name: Update OWASP Dependency-Check Database
                command: |
                  if ! ~/.owasp/dependency-check/bin/dependency-check.sh --data << parameters.cve_data_directory >> --updateonly; then
                    # Update failed, probably due to a bad DB version; delete cached DB and try again
                    rm -rv ~/.owasp/dependency-check-data/*.db
                    ~/.owasp/dependency-check/bin/dependency-check.sh --data << parameters.cve_data_directory >> --updateonly
                  fi
            - owasp/store_owasp_cache:
                cve_data_directory: <<parameters.cve_data_directory>>
            - run:
                name: Run OWASP Dependency-Check Analyzer
                command: |
                  ~/.owasp/dependency-check/bin/dependency-check.sh \
                    --data << parameters.cve_data_directory >> --format ALL --noupdate --enableExperimental \
                    --propertyfile ../security-automation-config/dependency-check/dependencycheck.properties \
                    --suppression ../security-automation-config/dependency-check/suppression.xml \
                    --suppression ../security-automation-config/dependency-check/suppression.$CIRCLE_PROJECT_REPONAME.xml \
                    --scan './**/*' || true
            - owasp/collect_reports:
                persist_to_workspace: false
      - run:
          name: Post results to Mattermost
          command: go run ../security-automation-config/dependency-check/post_results.go

  # TODO: enable this step when the i18n-extract works with mattermost-server only
  # and not depend on both mm-server/enterprise
  # check-i18n:
  #   docker:
  #   - image: circleci/golang:1.12
  #   working_directory: ~/mattermost/
  #   steps:
  #     - attach_workspace:
  #         at: ~/mattermost/
  #     - run:
  #         command: |
  #           cd mattermost-server
  #           cp i18n/en.json /tmp/en.json
  #           make i18n-extract
  #           diff /tmp/en.json i18n/en.json

  check-app-layers:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make app-layers
            if [[ -n $(git status --porcelain) ]]; then echo "Please update the app layers using make app-layers"; exit 1; fi
  check-go-mod-tidy:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make modules-tidy
            if [[ -n $(git status --porcelain) ]]; then echo "Please tidy up the Go modules using make modules-tidy"; exit 1; fi
  check-store-layers:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make store-layers
            if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi
  check-mocks:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make mocks
            if [[ -n $(git status --porcelain) ]]; then echo "Please update the mocks using `make mocks`"; exit 1; fi
  check-email-templates:
    docker:
      - image: cimg/go:1.17-node
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            sudo npm install -g mjml@4.9.0
            make build-templates
            if [[ -n $(git status --porcelain) ]]; then echo "Please update the email templates using `make build-templates`"; exit 1; fi
  check-gen-serialized:
    docker:
      - image: cimg/go:1.17
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make gen-serialized
            if [[ -n $(git status --porcelain) ]]; then echo "Please update the serialized files using 'make gen-serialized'"; exit 1; fi
  check-migrations:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make migrations-extract
            if [[ -n $(git status --porcelain) ]]; then echo "Please update the migrations using make migrations-extract"; exit 1; fi
  # Dedicated job for golangci-lint it does not need anything only the server code for that
  # and to make more clear when the job fails
  check-golangci-lint:
    docker:
      # Keep the version in sync with the command in Makefile
      - image: golangci/golangci-lint:v1.46.2
    steps:
      - checkout
      - run:
          command: make golangci-lint

  # Dedicate job for mattermost-vet to make more clear when the job fails
  check-mattermost-vet:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            export GOBIN=${PWD}/mattermost-server/bin
            export PATH=$PATH:$GOBIN
            cd mattermost-server
            make config-reset
            make plugin-checker
            make vet BUILD_NUMBER='${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}' MM_NO_ENTERPRISE_LINT=true MM_VET_OPENSPEC_PATH='${PWD}/../mattermost-api-reference/v4/html/static/mattermost-openapi-v4.yaml'
  # Dedicate job for sentry it does not need anything only the server code for that
  # and to make more clear when the job fails
  sentry:
    docker:
      - image: getsentry/sentry-cli:1.64.1
    steps:
      - checkout
      - run:
          command: apk add git
      - run:
          command: |
            sentry-cli --log-level=debug releases new  --finalize -p mattermost-server `git rev-parse HEAD`
            sentry-cli --log-level=debug releases set-commits --auto `git rev-parse HEAD`
  build-api-spec:
    docker:
      - image: circleci/node:lts
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            git clone --depth=1 --no-single-branch https://github.com/mattermost/mattermost-api-reference.git
            cd mattermost-api-reference
            echo "Trying to checkout the same branch on mattermost-api-reference as mattermost-server"
            git checkout ${CIRCLE_BRANCH} || true
            make build
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - mattermost-api-reference

  build-mattermost-server:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    resource_class: xlarge
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make config-reset
            make build-cmd BUILD_NUMBER='${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}'
            make package BUILD_NUMBER='${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}'
      - store_artifacts:
          path: ~/mattermost/mattermost-server/dist/mattermost-team-linux-amd64.tar.gz
      - store_artifacts:
          path: ~/mattermost/mattermost-server/dist/mattermost-team-osx-amd64.tar.gz
      - store_artifacts:
          path: ~/mattermost/mattermost-server/dist/mattermost-team-linux-arm64.tar.gz
      - store_artifacts:
          path: ~/mattermost/mattermost-server/dist/mattermost-team-osx-arm64.tar.gz
      - store_artifacts:
          path: ~/mattermost/mattermost-server/dist/mattermost-team-windows-amd64.zip
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - mattermost-server
            - mattermost-webapp

  build-focalboard:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    resource_class: xlarge
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd focalboard
            make server-linux
  configure-multirepo:
    docker:
      - image: mattermost/mattermost-build-server:20220415_golang-1.18.1
    working_directory: ~/mattermost
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd mattermost-server
            make setup-go-work
            cd ../focalboard
            EXCLUDE_ENTERPRISE=TRUE make templates-archive
      - persist_to_workspace:
          root: ~/mattermost
          paths:
            - mattermost-server
            - mattermost-webapp
            - focalboard

  test:
    executor:
      name: ubuntu
    parameters:
      dbdriver:
        type: string
      dbsource:
        type: string
      racemode:
        type: string
    steps:
      - attach_workspace:
          at: ~/mattermost
      - run:
          name: Run Docker compose
          command: |
            cd mattermost-server/build
            docker-compose --no-ansi run --rm start_dependencies
            cat ../tests/test-data.ldif | docker-compose --no-ansi exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
            docker-compose --no-ansi exec -T minio sh -c 'mkdir -p /data/mattermost-test';
            docker-compose --no-ansi ps
          background: true
      - run:
          name: Wait for docker compose
          command: |
            until docker network inspect circleci_mm-test; do echo "Waiting for Docker Compose Network..."; sleep 1; done;
            docker run --net circleci_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://mysql:3306; do echo waiting for mysql; sleep 5; done;"
            docker run --net circleci_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://elasticsearch:9200; do echo waiting for elasticsearch; sleep 5; done;"
      - run:
          name: Run Tests
          command: |
            mkdir -p mattermost-server/client/plugins
            cd mattermost-server/build
            docker run -it --net circleci_mm-test \
              --env-file=dotenv/test.env \
              --env MM_SQLSETTINGS_DATASOURCE="<<parameters.dbsource>>" \
              --env MM_SQLSETTINGS_DRIVERNAME=<<parameters.dbdriver>> \
              -v ~/mattermost:/mattermost \
              -w /mattermost/mattermost-server \
              mattermost/mattermost-build-server:20220415_golang-1.18.1 \
              bash -c "ulimit -n 8096; make test-server<< parameters.racemode >> BUILD_NUMBER=$CIRCLE_BRANCH-$CIRCLE_PREVIOUS_BUILD_NUM TESTFLAGS= TESTFLAGSEE=" \
              bash -c scripts/diff-email-templates.sh
          no_output_timeout: 2h
      - run:
          name: Capture docker logs
          when: always
          command: |
            cd mattermost-server/build
            # Capture docker logs
            mkdir -p logs
            docker-compose logs --tail="all" -t --no-color > logs/docker-compose_logs
            docker ps -a --no-trunc > logs/docker_ps
            docker stats -a --no-stream > logs/docker_stats
            tar -czvf logs/docker_logs.tar.gz logs/docker-compose_logs logs/docker_ps logs/docker_stats
      - store_artifacts:
          path: ~/mattermost/mattermost-server/build/logs
      - run:
          when: always
          command: |
            cd mattermost-server
            mkdir -p test-results
            cp report.xml test-results
      - store_test_results:
          path: ~/mattermost/mattermost-server/test-results/
      - store_artifacts:
          path: ~/mattermost/mattermost-server/test-results/

  test-schema:
    executor:
      name: ubuntu
    steps:
      - attach_workspace:
          at: ~/mattermost
      - run:
          name: Run Docker compose
          command: |
            cd mattermost-server/build
            docker-compose --no-ansi run --rm start_dependencies
            cat ../tests/test-data.ldif | docker-compose --no-ansi exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
            docker-compose --no-ansi exec -T minio sh -c 'mkdir -p /data/mattermost-test';
            docker-compose --no-ansi ps
          background: true
      - run:
          name: Wait for docker compose
          command: |
            until docker network inspect circleci_mm-test; do echo "Waiting for Docker Compose Network..."; sleep 1; done;
            docker run --net circleci_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://mysql:3306; do echo waiting for mysql; sleep 5; done;"
            docker run --net circleci_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://elasticsearch:9200; do echo waiting for elasticsearch; sleep 5; done;"
      - run:
          name: Postgres schema migration validation
          command: |
            cd mattermost-server/build
            mkdir -p mattermost-server/client/plugins
            echo "Creating databases"
            docker-compose --no-ansi exec -T postgres sh -c 'exec echo "CREATE DATABASE migrated; CREATE DATABASE latest;" | exec psql -U mmuser mattermost_test'
            echo "Importing postgres dump from version 6.0.0"
            docker-compose --no-ansi exec -T postgres psql -U mmuser -d migrated < ../scripts/mattermost-postgresql-6.0.0.sql
            docker-compose --no-ansi exec -T postgres psql -U mmuser -d migrated -c "INSERT INTO Systems (Name, Value) VALUES ('Version', '6.0.0')"
            docker run -it --net circleci_mm-test \
              --env-file="dotenv/test-schema-validation.env" \
              --env MM_SQLSETTINGS_DATASOURCE="postgres://mmuser:mostest@postgres:5432/migrated?sslmode=disable&connect_timeout=10" \
              --env MM_SQLSETTINGS_DRIVERNAME=postgres \
              -v ~/mattermost:/mattermost \
              -w /mattermost/mattermost-server \
              mattermost/mattermost-build-server:20220415_golang-1.18.1 \
              bash -c "ulimit -n 8096; make ARGS='db migrate' run-cli && make MM_SQLSETTINGS_DATASOURCE='postgres://mmuser:mostest@postgres:5432/latest?sslmode=disable&connect_timeout=10' ARGS='db migrate' run-cli"
            echo "Generating dump"
            docker-compose --no-ansi exec -T postgres pg_dump --schema-only -d migrated -U mmuser > migrated.sql
            docker-compose --no-ansi exec -T postgres pg_dump --schema-only -d latest -U mmuser > latest.sql
            echo "Removing databases created for db comparison"
            docker-compose --no-ansi exec -T postgres sh -c 'exec echo "DROP DATABASE migrated; DROP DATABASE latest;" | exec psql -U mmuser mattermost_test'
            echo "Generating diff"
            diff migrated.sql latest.sql > diff.txt && echo "Both schemas are same" || (echo "Schema mismatch" && cat diff.txt && exit 1)
          no_output_timeout: 1h
      - run:
          name: MySQL schema migration validation
          command: |
            cd mattermost-server/build
            mkdir -p mattermost-server/client/plugins
            echo "Creating databases"
            docker-compose --no-ansi exec -T mysql mysql -uroot -pmostest -e "CREATE DATABASE migrated; CREATE DATABASE latest; GRANT ALL PRIVILEGES ON migrated.* TO mmuser; GRANT ALL PRIVILEGES ON latest.* TO mmuser"
            echo "Importing mysql dump from version 6.0.0"
            docker-compose --no-ansi exec -T mysql mysql -D migrated -uroot -pmostest < ../scripts/mattermost-mysql-6.0.0.sql
            docker-compose --no-ansi exec -T mysql mysql -D migrated -uroot -pmostest -e "INSERT INTO Systems (Name, Value) VALUES ('Version', '6.0.0')"
            docker run -it --net circleci_mm-test \
              --env-file="dotenv/test-schema-validation.env" \
              --env MM_SQLSETTINGS_DATASOURCE="mmuser:mostest@tcp(mysql:3306)/migrated?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s" \
              --env MM_SQLSETTINGS_DRIVERNAME=mysql \
              -v ~/mattermost:/mattermost \
              -w /mattermost/mattermost-server \
              mattermost/mattermost-build-server:20220415_golang-1.18.1 \
              bash -c "ulimit -n 8096; make ARGS='db migrate' run-cli && make MM_SQLSETTINGS_DATASOURCE='mmuser:mostest@tcp(mysql:3306)/latest?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s' ARGS='db migrate' run-cli"
            echo "Generating dump"
            docker-compose --no-ansi exec -T mysql mysqldump --skip-opt --no-data --compact -u root -pmostest migrated > migrated.sql
            docker-compose --no-ansi exec -T mysql mysqldump --skip-opt --no-data --compact -u root -pmostest latest > latest.sql
            echo "Removing databases created for db comparison"
            docker-compose --no-ansi exec -T mysql mysql -uroot -pmostest -e 'DROP DATABASE migrated; DROP DATABASE latest'
            echo "Generating diff"
            diff migrated.sql latest.sql > diff.txt && echo "Both schemas are same" || (echo "Schema mismatch" && cat diff.txt && exit 1)
          no_output_timeout: 1h

  upload-s3-sha:
    docker:
      - image: circleci/python:3.6
    working_directory: ~/mattermost/enterprise
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd ~/mattermost/mattermost-server/dist/
            rm -rf mattermost
      - aws-s3/copy:
          from: ~/mattermost/mattermost-server/dist/
          to: "s3://pr-builds.mattermost.com/mattermost-server/commit/${CIRCLE_SHA1}/"
          arguments: --acl public-read --cache-control "no-cache" --recursive

  upload-s3:
    docker:
      - image: circleci/python:3.6
    working_directory: ~/mattermost/enterprise
    steps:
      - attach_workspace:
          at: ~/mattermost/
      - run:
          command: |
            cd ~/mattermost/mattermost-server/dist/
            rm -rf mattermost
      - aws-s3/copy:
          from: ~/mattermost/mattermost-server/dist/
          to: s3://pr-builds.mattermost.com/mattermost-server/$(echo "${CIRCLE_BRANCH}" | sed 's/pull\//PR-/g')/
          arguments: --acl public-read --cache-control "no-cache" --recursive

  build-docker:
    working_directory: ~/
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          command: |
            export TAG="${CIRCLE_SHA1:0:7}"
            cd mattermost-server
            export DOCKER_CLI_EXPERIMENTAL=enabled
            echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
            export MM_PACKAGE=https://pr-builds.mattermost.com/mattermost-server/commit/${CIRCLE_SHA1}/mattermost-team-linux-amd64.tar.gz
            docker buildx build --push --build-arg MM_PACKAGE=$MM_PACKAGE -t mattermost/mm-te-test:${TAG} build
workflows:
  version: 2
  untagged-build:
    jobs:
      - setup-mattermost-server:
          filters:
            branches:
              ignore:
                - master
                - /^release-.*/
      - setup-mattermost-webapp:
          filters:
            branches:
              ignore:
                - master
                - /^release-.*/
      - setup-focalboard:
          filters:
            branches:
              ignore:
                - master
                - /^release-.*/
      # Disabling check-deps since the new version is not on bintray and all builds will fail
      # we've are on top of this, and it's going to be temporary.
      #- check-deps:
      #     context: sast-webhook
      #    requires:
      #      - setup
      # - check-i18n:
      #     requires:
      #       - setup
      - check-go-mod-tidy:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-golangci-lint:
          filters:
            branches:
              ignore:
                - master
                - /^release-.*/
      - check-app-layers:
          requires:
            - configure-multirepo
      - check-store-layers:
          requires:
            - configure-multirepo
      - check-mocks:
          requires:
            - configure-multirepo
      - check-email-templates:
          requires:
            - configure-multirepo
      - check-gen-serialized:
          requires:
            - configure-multirepo
      - check-mattermost-vet:
          requires:
            - configure-multirepo
      - check-migrations:
          requires:
            - configure-multirepo
      - build-api-spec:
          requires:
            - configure-multirepo
      - configure-multirepo:
         requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
            - setup-focalboard
      - build-mattermost-server:
          requires:
            - check-go-mod-tidy
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
            - check-mattermost-vet
            - check-golangci-lint
            - check-migrations
            - build-api-spec
      - build-focalboard:
          requires:
            - check-go-mod-tidy
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
            - check-mattermost-vet
            - check-golangci-lint
            - check-migrations
            - build-api-spec
      - upload-s3-sha:
          context: mattermost-ci-pr-builds-s3
          requires:
            - build-mattermost-server
            - build-focalboard
      - upload-s3:
          context: mattermost-ci-pr-builds-s3
          requires:
            - build-mattermost-server
            - build-focalboard
      - build-docker:
          context: matterbuild-docker
          requires:
            - upload-s3-sha
      - test:
          name: test-mysql
          dbdriver: mysql
          dbsource: mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8&multiStatements=true
          racemode: ""
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
      - test:
          name: test-postgres-normal
          dbdriver: postgres
          dbsource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
          racemode: ""
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
      - test:
          name: test-postgres-binary
          dbdriver: postgres
          dbsource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes
          racemode: ""
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
      - test-schema:
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
  release-build:
    jobs:
      - setup-mattermost-server:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
                - cloud
      - setup-mattermost-webapp:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
                - cloud

      # Disabling check-deps since the new version is not on bintray and all builds will fail
      # we've are on top of this, and it's going to be temporary.
      #- check-deps:
      #    context: sast-webhook
      #    requires:
      #      - setup
      # - check-i18n:
      #     requires:
      #       - setup
      - check-golangci-lint:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
                - cloud
      - check-go-mod-tidy:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-app-layers:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-store-layers:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - build-api-spec:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-mocks:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-email-templates:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-gen-serialized:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - check-mattermost-vet:
          requires:
            - setup-mattermost-server
            - setup-mattermost-webapp
      - sentry:
          context: matterbuild-sentry
          requires:
            - check-go-mod-tidy
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
            - check-mattermost-vet
            - check-golangci-lint
            - build-api-spec
      - build-mattermost-server:
          requires:
            - check-go-mod-tidy
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
            - check-mattermost-vet
            - build-api-spec
      - test:
          name: test-mysql
          dbdriver: mysql
          dbsource: mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8&multiStatements=true
          racemode: "-race"
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
      - test:
          name: test-postgres-normal
          dbdriver: postgres
          dbsource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10
          racemode: "-race"
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
      - test:
          name: test-postgres-binary
          dbdriver: postgres
          dbsource: postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10&binary_parameters=yes
          racemode: ""
          requires:
            - check-app-layers
            - check-store-layers
            - check-mocks
            - check-email-templates
            - check-gen-serialized
      # test-schema for master run in .gitlab-ci.yml
